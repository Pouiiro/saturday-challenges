/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutInvestmentsImport } from './routes/_layout/investments'
import { Route as LayoutIncomeImport } from './routes/_layout/income'
import { Route as LayoutExpensesImport } from './routes/_layout/expenses'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutInvestmentsRoute = LayoutInvestmentsImport.update({
  id: '/investments',
  path: '/investments',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutIncomeRoute = LayoutIncomeImport.update({
  id: '/income',
  path: '/income',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutExpensesRoute = LayoutExpensesImport.update({
  id: '/expenses',
  path: '/expenses',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/expenses': {
      id: '/_layout/expenses'
      path: '/expenses'
      fullPath: '/expenses'
      preLoaderRoute: typeof LayoutExpensesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/income': {
      id: '/_layout/income'
      path: '/income'
      fullPath: '/income'
      preLoaderRoute: typeof LayoutIncomeImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/investments': {
      id: '/_layout/investments'
      path: '/investments'
      fullPath: '/investments'
      preLoaderRoute: typeof LayoutInvestmentsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutExpensesRoute: typeof LayoutExpensesRoute
  LayoutIncomeRoute: typeof LayoutIncomeRoute
  LayoutInvestmentsRoute: typeof LayoutInvestmentsRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutExpensesRoute: LayoutExpensesRoute,
  LayoutIncomeRoute: LayoutIncomeRoute,
  LayoutInvestmentsRoute: LayoutInvestmentsRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/expenses': typeof LayoutExpensesRoute
  '/income': typeof LayoutIncomeRoute
  '/investments': typeof LayoutInvestmentsRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesByTo {
  '/expenses': typeof LayoutExpensesRoute
  '/income': typeof LayoutIncomeRoute
  '/investments': typeof LayoutInvestmentsRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/expenses': typeof LayoutExpensesRoute
  '/_layout/income': typeof LayoutIncomeRoute
  '/_layout/investments': typeof LayoutInvestmentsRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/': typeof LayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/expenses' | '/income' | '/investments' | '/settings' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/expenses' | '/income' | '/investments' | '/settings' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/expenses'
    | '/_layout/income'
    | '/_layout/investments'
    | '/_layout/settings'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/expenses",
        "/_layout/income",
        "/_layout/investments",
        "/_layout/settings",
        "/_layout/"
      ]
    },
    "/_layout/expenses": {
      "filePath": "_layout/expenses.tsx",
      "parent": "/_layout"
    },
    "/_layout/income": {
      "filePath": "_layout/income.tsx",
      "parent": "/_layout"
    },
    "/_layout/investments": {
      "filePath": "_layout/investments.tsx",
      "parent": "/_layout"
    },
    "/_layout/settings": {
      "filePath": "_layout/settings.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
